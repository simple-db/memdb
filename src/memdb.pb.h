// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memdb.proto

#ifndef PROTOBUF_INCLUDED_memdb_2eproto
#define PROTOBUF_INCLUDED_memdb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_memdb_2eproto 

namespace protobuf_memdb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_memdb_2eproto
namespace codu {
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class KeySet;
class KeySetDefaultTypeInternal;
extern KeySetDefaultTypeInternal _KeySet_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class RecordSet;
class RecordSetDefaultTypeInternal;
extern RecordSetDefaultTypeInternal _RecordSet_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ValueSet;
class ValueSetDefaultTypeInternal;
extern ValueSetDefaultTypeInternal _ValueSet_default_instance_;
}  // namespace codu
namespace google {
namespace protobuf {
template<> ::codu::Key* Arena::CreateMaybeMessage<::codu::Key>(Arena*);
template<> ::codu::KeySet* Arena::CreateMaybeMessage<::codu::KeySet>(Arena*);
template<> ::codu::Record* Arena::CreateMaybeMessage<::codu::Record>(Arena*);
template<> ::codu::RecordSet* Arena::CreateMaybeMessage<::codu::RecordSet>(Arena*);
template<> ::codu::Status* Arena::CreateMaybeMessage<::codu::Status>(Arena*);
template<> ::codu::Value* Arena::CreateMaybeMessage<::codu::Value>(Arena*);
template<> ::codu::ValueSet* Arena::CreateMaybeMessage<::codu::ValueSet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace codu {

// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(NULL);
  }

  Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:codu.Key)
 private:
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeySet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.KeySet) */ {
 public:
  KeySet();
  virtual ~KeySet();

  KeySet(const KeySet& from);

  inline KeySet& operator=(const KeySet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeySet(KeySet&& from) noexcept
    : KeySet() {
    *this = ::std::move(from);
  }

  inline KeySet& operator=(KeySet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeySet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeySet* internal_default_instance() {
    return reinterpret_cast<const KeySet*>(
               &_KeySet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KeySet* other);
  friend void swap(KeySet& a, KeySet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeySet* New() const final {
    return CreateMaybeMessage<KeySet>(NULL);
  }

  KeySet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeySet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeySet& from);
  void MergeFrom(const KeySet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeySet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .codu.Key keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  ::codu::Key* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::codu::Key >*
      mutable_keys();
  const ::codu::Key& keys(int index) const;
  ::codu::Key* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::codu::Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:codu.KeySet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::codu::Key > keys_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:codu.Value)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.ValueSet) */ {
 public:
  ValueSet();
  virtual ~ValueSet();

  ValueSet(const ValueSet& from);

  inline ValueSet& operator=(const ValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSet(ValueSet&& from) noexcept
    : ValueSet() {
    *this = ::std::move(from);
  }

  inline ValueSet& operator=(ValueSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSet* internal_default_instance() {
    return reinterpret_cast<const ValueSet*>(
               &_ValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ValueSet* other);
  friend void swap(ValueSet& a, ValueSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSet* New() const final {
    return CreateMaybeMessage<ValueSet>(NULL);
  }

  ValueSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSet& from);
  void MergeFrom(const ValueSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .codu.Value values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::codu::Value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::codu::Value >*
      mutable_values();
  const ::codu::Value& values(int index) const;
  ::codu::Value* add_values();
  const ::google::protobuf::RepeatedPtrField< ::codu::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:codu.ValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::codu::Value > values_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(NULL);
  }

  Record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:codu.Record)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.RecordSet) */ {
 public:
  RecordSet();
  virtual ~RecordSet();

  RecordSet(const RecordSet& from);

  inline RecordSet& operator=(const RecordSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordSet(RecordSet&& from) noexcept
    : RecordSet() {
    *this = ::std::move(from);
  }

  inline RecordSet& operator=(RecordSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordSet* internal_default_instance() {
    return reinterpret_cast<const RecordSet*>(
               &_RecordSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RecordSet* other);
  friend void swap(RecordSet& a, RecordSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordSet* New() const final {
    return CreateMaybeMessage<RecordSet>(NULL);
  }

  RecordSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordSet& from);
  void MergeFrom(const RecordSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .codu.Record records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  ::codu::Record* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::codu::Record >*
      mutable_records();
  const ::codu::Record& records(int index) const;
  ::codu::Record* add_records();
  const ::google::protobuf::RepeatedPtrField< ::codu::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:codu.RecordSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::codu::Record > records_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:codu.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(NULL);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .codu.Value values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::codu::Value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::codu::Value >*
      mutable_values();
  const ::codu::Value& values(int index) const;
  ::codu::Value* add_values();
  const ::google::protobuf::RepeatedPtrField< ::codu::Value >&
      values() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:codu.Status)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::codu::Value > values_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 error_;
  friend struct ::protobuf_memdb_2eproto::TableStruct;
};
// ===================================================================

class DBService_Stub;

class DBService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DBService() {};
 public:
  virtual ~DBService();

  typedef DBService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void get(::google::protobuf::RpcController* controller,
                       const ::codu::Key* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void set(::google::protobuf::RpcController* controller,
                       const ::codu::Record* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void mget(::google::protobuf::RpcController* controller,
                       const ::codu::KeySet* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void mset(::google::protobuf::RpcController* controller,
                       const ::codu::RecordSet* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DBService);
};

class DBService_Stub : public DBService {
 public:
  DBService_Stub(::google::protobuf::RpcChannel* channel);
  DBService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DBService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DBService ------------------------------------------

  void get(::google::protobuf::RpcController* controller,
                       const ::codu::Key* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  void set(::google::protobuf::RpcController* controller,
                       const ::codu::Record* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  void mget(::google::protobuf::RpcController* controller,
                       const ::codu::KeySet* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
  void mset(::google::protobuf::RpcController* controller,
                       const ::codu::RecordSet* request,
                       ::codu::Status* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DBService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Key

// required bytes key = 1;
inline bool Key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:codu.Key.key)
  return key_.GetNoArena();
}
inline void Key::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:codu.Key.key)
}
#if LANG_CXX11
inline void Key::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:codu.Key.key)
}
#endif
inline void Key::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:codu.Key.key)
}
inline void Key::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:codu.Key.key)
}
inline ::std::string* Key::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:codu.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:codu.Key.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:codu.Key.key)
}

// -------------------------------------------------------------------

// KeySet

// repeated .codu.Key keys = 1;
inline int KeySet::keys_size() const {
  return keys_.size();
}
inline void KeySet::clear_keys() {
  keys_.Clear();
}
inline ::codu::Key* KeySet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:codu.KeySet.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::codu::Key >*
KeySet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:codu.KeySet.keys)
  return &keys_;
}
inline const ::codu::Key& KeySet::keys(int index) const {
  // @@protoc_insertion_point(field_get:codu.KeySet.keys)
  return keys_.Get(index);
}
inline ::codu::Key* KeySet::add_keys() {
  // @@protoc_insertion_point(field_add:codu.KeySet.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::codu::Key >&
KeySet::keys() const {
  // @@protoc_insertion_point(field_list:codu.KeySet.keys)
  return keys_;
}

// -------------------------------------------------------------------

// Value

// optional bytes value = 1;
inline bool Value::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:codu.Value.value)
  return value_.GetNoArena();
}
inline void Value::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:codu.Value.value)
}
#if LANG_CXX11
inline void Value::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:codu.Value.value)
}
#endif
inline void Value::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:codu.Value.value)
}
inline void Value::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:codu.Value.value)
}
inline ::std::string* Value::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:codu.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:codu.Value.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:codu.Value.value)
}

// -------------------------------------------------------------------

// ValueSet

// repeated .codu.Value values = 1;
inline int ValueSet::values_size() const {
  return values_.size();
}
inline void ValueSet::clear_values() {
  values_.Clear();
}
inline ::codu::Value* ValueSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:codu.ValueSet.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::codu::Value >*
ValueSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:codu.ValueSet.values)
  return &values_;
}
inline const ::codu::Value& ValueSet::values(int index) const {
  // @@protoc_insertion_point(field_get:codu.ValueSet.values)
  return values_.Get(index);
}
inline ::codu::Value* ValueSet::add_values() {
  // @@protoc_insertion_point(field_add:codu.ValueSet.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::codu::Value >&
ValueSet::values() const {
  // @@protoc_insertion_point(field_list:codu.ValueSet.values)
  return values_;
}

// -------------------------------------------------------------------

// Record

// required bytes key = 1;
inline bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:codu.Record.key)
  return key_.GetNoArena();
}
inline void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:codu.Record.key)
}
#if LANG_CXX11
inline void Record::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:codu.Record.key)
}
#endif
inline void Record::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:codu.Record.key)
}
inline void Record::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:codu.Record.key)
}
inline ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:codu.Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:codu.Record.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:codu.Record.key)
}

// required bytes value = 2;
inline bool Record::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Record::value() const {
  // @@protoc_insertion_point(field_get:codu.Record.value)
  return value_.GetNoArena();
}
inline void Record::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:codu.Record.value)
}
#if LANG_CXX11
inline void Record::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:codu.Record.value)
}
#endif
inline void Record::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:codu.Record.value)
}
inline void Record::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:codu.Record.value)
}
inline ::std::string* Record::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:codu.Record.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_value() {
  // @@protoc_insertion_point(field_release:codu.Record.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:codu.Record.value)
}

// -------------------------------------------------------------------

// RecordSet

// repeated .codu.Record records = 1;
inline int RecordSet::records_size() const {
  return records_.size();
}
inline void RecordSet::clear_records() {
  records_.Clear();
}
inline ::codu::Record* RecordSet::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:codu.RecordSet.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::codu::Record >*
RecordSet::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:codu.RecordSet.records)
  return &records_;
}
inline const ::codu::Record& RecordSet::records(int index) const {
  // @@protoc_insertion_point(field_get:codu.RecordSet.records)
  return records_.Get(index);
}
inline ::codu::Record* RecordSet::add_records() {
  // @@protoc_insertion_point(field_add:codu.RecordSet.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::codu::Record >&
RecordSet::records() const {
  // @@protoc_insertion_point(field_list:codu.RecordSet.records)
  return records_;
}

// -------------------------------------------------------------------

// Status

// required int32 error = 1;
inline bool Status::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 Status::error() const {
  // @@protoc_insertion_point(field_get:codu.Status.error)
  return error_;
}
inline void Status::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:codu.Status.error)
}

// optional string msg = 2;
inline bool Status::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:codu.Status.msg)
  return msg_.GetNoArena();
}
inline void Status::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:codu.Status.msg)
}
#if LANG_CXX11
inline void Status::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:codu.Status.msg)
}
#endif
inline void Status::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:codu.Status.msg)
}
inline void Status::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:codu.Status.msg)
}
inline ::std::string* Status::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:codu.Status.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:codu.Status.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:codu.Status.msg)
}

// repeated .codu.Value values = 3;
inline int Status::values_size() const {
  return values_.size();
}
inline void Status::clear_values() {
  values_.Clear();
}
inline ::codu::Value* Status::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:codu.Status.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::codu::Value >*
Status::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:codu.Status.values)
  return &values_;
}
inline const ::codu::Value& Status::values(int index) const {
  // @@protoc_insertion_point(field_get:codu.Status.values)
  return values_.Get(index);
}
inline ::codu::Value* Status::add_values() {
  // @@protoc_insertion_point(field_add:codu.Status.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::codu::Value >&
Status::values() const {
  // @@protoc_insertion_point(field_list:codu.Status.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace codu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_memdb_2eproto
